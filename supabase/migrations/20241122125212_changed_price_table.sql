drop function if exists "public"."filter_products"(name_filter text, price_filter text, bestseller boolean, active boolean, "order" text, category_filter text);

create table "public"."products_prices" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "price" bigint not null,
    "description" character varying,
    "product" bigint not null
);


alter table "public"."products_prices" enable row level security;

alter table "public"."products" drop column "price";

alter table "public"."products" alter column "is_best_seller" set default false;

CREATE UNIQUE INDEX products_prices_pkey ON public.products_prices USING btree (id);

alter table "public"."products_prices" add constraint "products_prices_pkey" PRIMARY KEY using index "products_prices_pkey";

alter table "public"."products_prices" add constraint "products_prices_product_fkey" FOREIGN KEY (product) REFERENCES products(id) not valid;

alter table "public"."products_prices" validate constraint "products_prices_product_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.filter_products(name_filter text, price_filter text, bestseller boolean, active boolean, "order" text, category_filter text, sub_category_filter text)
 RETURNS TABLE(id bigint, name character varying, image_url character varying, is_best_seller boolean, is_active boolean, category bigint, label character varying, price bigint, sub_category character varying, sub_category_id bigint)
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
    condition text := '';
    sql text := 'SELECT 
              DISTINCT ON (p.id)
              p.id, 
              p.name, 
              p.image_url,
              p.is_best_seller,
              p.is_active, 
              p.category, 
              pc.label, 
              pp.price,
              sc.label as sub_category,
              p.sub_category as sub_category_id
              FROM products p
              LEFT JOIN products_category pc ON pc.id = p.category
              LEFT JOIN products_prices pp ON pp.product = p.Id
              LEFT JOIN sub_category sc ON sc.id = p.sub_category
              WHERE 1 = 1 ';
BEGIN
    -- Build the condition dynamically based on the value of "name"
    IF name_filter IS NOT NULL AND name_filter != '' THEN
        condition := condition || ' AND name ILIKE ''%' || name_filter || '%''';
    END IF;

    IF category_filter IS NOT NULL AND category_filter != '' THEN
        condition := condition || ' AND p.category = ' || category_filter || '';
    END IF;

    IF price_filter IS NOT NULL AND price_filter != '' THEN
        condition := condition || ' AND pp.price = ' || price_filter || '';
    END IF;

    IF bestSeller IS NOT NULL THEN
        condition := condition || ' AND is_best_seller = ' || bestSeller || '';
    END IF;

    IF active IS NOT NULL THEN
        condition := condition || ' AND p.is_active = ' || active || '';
    END IF;

    IF sub_category_filter IS NOT NULL AND sub_category_filter != '' THEN
        condition := condition || ' AND sc.id = ' || sub_category_filter || '';
    END IF;

    IF "order" IS NOT NULL AND "order" != '' THEN
        IF "order" = 'newest' THEN
            condition := condition || ' ORDER BY p.created_at DESC';
        ELSE
            condition := condition || ' ORDER BY p.created_at ASC';
        END IF;
    END IF;

    sql := sql || condition;

    -- Execute the dynamic SQL and return the result
    RETURN QUERY EXECUTE sql;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.filter_products(name_filter text, price_filter text, bestseller boolean, active boolean, "order" text, sub_category_filter text)
 RETURNS TABLE(id bigint, name character varying, image_url character varying, price bigint, is_best_seller boolean, is_active boolean, category bigint, label character varying, sub_category character varying, sub_category_id bigint)
 LANGUAGE plpgsql
AS $function$
DECLARE
    condition text := '';
    sql text := 'SELECT DISTINCT on (p.id)
              p.id, 
              p.name, 
              p.image_url,
              p.is_best_seller,
              p.is_active, 
              p.category, 
              pc.label, 
              pp.price,
              sc.label as sub_category
              p.sub_category as sub_category_id
              FROM products p
              LEFT JOIN products_category pc ON pc.id = p.category
              LEFT JOIN products_prices pp ON pp.product = p.Id
              LEFT JOIN sub_category sc ON sc.category = p.sub_category
              WHERE p.category = ' || category_filter || '';
BEGIN
    -- Build the condition dynamically based on the value of "name"
    IF name_filter IS NOT NULL AND name_filter != '' THEN
        condition := condition || ' AND name ILIKE ''%' || name_filter || '%''';
    END IF;

    IF price_filter IS NOT NULL AND price_filter != '' THEN
        condition := condition || ' AND pp.price = ' || price_filter || '';
    END IF;

    IF bestSeller IS NOT NULL THEN
        condition := condition || ' AND is_best_seller = ' || bestSeller || '';
    END IF;

    IF active IS NOT NULL THEN
        condition := condition || ' AND p.is_active = ' || active || '';
    END IF;

    IF sub_category_filter IS NOT NULL THEN
        condition := condition || ' AND sc.id = ' || sub_category_filter || '';
    END IF;

    IF "order" IS NOT NULL AND "order" != '' THEN
        IF "order" = 'newest' THEN
            condition := condition || ' ORDER BY p.created_at DESC';
        ELSE
            condition := condition || ' ORDER BY p.created_at ASC';
        END IF;
    END IF;

    sql := sql || condition;

    -- Execute the dynamic SQL and return the result
    RETURN QUERY EXECUTE sql;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_price_opts(category_filter text)
 RETURNS TABLE(label character varying, value character varying)
 LANGUAGE plpgsql
AS $function$BEGIN
    RETURN query
   SELECT DISTINCT 
   pp.price::varchar as value, pp.price::varchar as label
   FROM products_prices pp
   LEFT JOIN products p ON p.Id = pp.product
   WHERE category = category_filter::BIGINT;
END;$function$
;

grant delete on table "public"."products_prices" to "anon";

grant insert on table "public"."products_prices" to "anon";

grant references on table "public"."products_prices" to "anon";

grant select on table "public"."products_prices" to "anon";

grant trigger on table "public"."products_prices" to "anon";

grant truncate on table "public"."products_prices" to "anon";

grant update on table "public"."products_prices" to "anon";

grant delete on table "public"."products_prices" to "authenticated";

grant insert on table "public"."products_prices" to "authenticated";

grant references on table "public"."products_prices" to "authenticated";

grant select on table "public"."products_prices" to "authenticated";

grant trigger on table "public"."products_prices" to "authenticated";

grant truncate on table "public"."products_prices" to "authenticated";

grant update on table "public"."products_prices" to "authenticated";

grant delete on table "public"."products_prices" to "service_role";

grant insert on table "public"."products_prices" to "service_role";

grant references on table "public"."products_prices" to "service_role";

grant select on table "public"."products_prices" to "service_role";

grant trigger on table "public"."products_prices" to "service_role";

grant truncate on table "public"."products_prices" to "service_role";

grant update on table "public"."products_prices" to "service_role";

create policy "Enable read access for all users"
on "public"."products_prices"
as permissive
for all
to public
using (true);



