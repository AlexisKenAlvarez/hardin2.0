drop function if exists "public"."get_name_opts"();

drop function if exists "public"."get_price_opts"();

create table "public"."sub_category" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "label" character varying not null,
    "is_active" boolean default true,
    "category" bigint not null
);


alter table "public"."sub_category" enable row level security;

alter table "public"."products" add column "sub_category" bigint;

CREATE UNIQUE INDEX drinks_category_label_key ON public.sub_category USING btree (label);

CREATE UNIQUE INDEX drinks_category_pkey ON public.sub_category USING btree (id);

alter table "public"."sub_category" add constraint "drinks_category_pkey" PRIMARY KEY using index "drinks_category_pkey";

alter table "public"."products" add constraint "products_sub_category_fkey" FOREIGN KEY (sub_category) REFERENCES sub_category(id) not valid;

alter table "public"."products" validate constraint "products_sub_category_fkey";

alter table "public"."sub_category" add constraint "drinks_category_label_key" UNIQUE using index "drinks_category_label_key";

alter table "public"."sub_category" add constraint "sub_category_category_fkey" FOREIGN KEY (category) REFERENCES products_category(id) ON DELETE RESTRICT not valid;

alter table "public"."sub_category" validate constraint "sub_category_category_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_name_opts(category_filter text)
 RETURNS TABLE(label character varying, value character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN query
    SELECT DISTINCT p.name AS value, p.name AS label 
    FROM products p WHERE category = category_filter::BIGINT ORDER BY p.name asc;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_price_opts(category_filter text)
 RETURNS TABLE(label character varying, value character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN query
   SELECT DISTINCT price::varchar as value, price::varchar as label FROM products WHERE category = category_filter::BIGINT;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.filter_products(name_filter text, price_filter text, bestseller boolean, active boolean, "order" text, category_filter text)
 RETURNS TABLE(id bigint, name character varying, image_url character varying, price bigint, is_best_seller boolean, is_active boolean, category bigint, label character varying)
 LANGUAGE plpgsql
AS $function$
DECLARE
    condition text := '';
    sql text := 'SELECT 
              p.id, 
              p.name, 
              p.image_url,
              p.price, 
              p.is_best_seller,
              p.is_active, 
              p.category, 
              pc.label 
              FROM products p
              LEFT JOIN products_category pc ON pc.id = p.category
              WHERE p.category = ' || category_filter || '';
BEGIN
    -- Build the condition dynamically based on the value of "name"
    IF name_filter IS NOT NULL AND name_filter != '' THEN
        condition := condition || ' AND name ILIKE ''%' || name_filter || '%''';
    END IF;

    IF price_filter IS NOT NULL AND price_filter != '' THEN
        condition := condition || ' AND price = ' || price_filter || '';
    END IF;

    IF bestSeller IS NOT NULL THEN
        condition := condition || ' AND is_best_seller = ' || bestSeller || '';
    END IF;

    IF active IS NOT NULL THEN
        condition := condition || ' AND p.is_active = ' || active || '';
    END IF;

    IF "order" IS NOT NULL AND "order" != '' THEN
        IF "order" = 'newest' THEN
            condition := condition || ' ORDER BY p.created_at DESC';
        ELSE
            condition := condition || ' ORDER BY p.created_at ASC';
        END IF;
    END IF;

    sql := sql || condition;

    -- Execute the dynamic SQL and return the result
    RETURN QUERY EXECUTE sql;
END;
$function$
;

grant delete on table "public"."sub_category" to "anon";

grant insert on table "public"."sub_category" to "anon";

grant references on table "public"."sub_category" to "anon";

grant select on table "public"."sub_category" to "anon";

grant trigger on table "public"."sub_category" to "anon";

grant truncate on table "public"."sub_category" to "anon";

grant update on table "public"."sub_category" to "anon";

grant delete on table "public"."sub_category" to "authenticated";

grant insert on table "public"."sub_category" to "authenticated";

grant references on table "public"."sub_category" to "authenticated";

grant select on table "public"."sub_category" to "authenticated";

grant trigger on table "public"."sub_category" to "authenticated";

grant truncate on table "public"."sub_category" to "authenticated";

grant update on table "public"."sub_category" to "authenticated";

grant delete on table "public"."sub_category" to "service_role";

grant insert on table "public"."sub_category" to "service_role";

grant references on table "public"."sub_category" to "service_role";

grant select on table "public"."sub_category" to "service_role";

grant trigger on table "public"."sub_category" to "service_role";

grant truncate on table "public"."sub_category" to "service_role";

grant update on table "public"."sub_category" to "service_role";

create policy "Enable read access for all users"
on "public"."featured"
as permissive
for all
to public
using (true);


create policy "Enable read access for all users"
on "public"."sub_category"
as permissive
for all
to public
using (true);



